import cv2
import numpy as np
import os

# Initialize parameters
lower_blue = np.array([90, 50, 50])   # Default lower bound for blue in HSV
upper_blue = np.array([130, 255, 255]) # Default upper bound for blue in HSV
threshold_value = 50                   # Default threshold value
blur_kernel_size = 5                   # Default blur kernel size

# Load images from directory
current_image_index = 0
image_directory = 'D:/Hackathon/images/pre/'
image_files = [f for f in os.listdir(image_directory) if f.endswith(('.jpg', '.png', '.jpeg'))]

if not image_files:
    raise FileNotFoundError(f"No images found in {image_directory}")

def update_image(*args):
    global lower_blue, upper_blue, threshold_value, blur_kernel_size

    # Get trackbar values
    lower_blue[0] = cv2.getTrackbarPos('Lower H', 'Trackbars')
    lower_blue[1] = cv2.getTrackbarPos('Lower S', 'Trackbars')
    lower_blue[2] = cv2.getTrackbarPos('Lower V', 'Trackbars')

    upper_blue[0] = cv2.getTrackbarPos('Upper H', 'Trackbars')
    upper_blue[1] = cv2.getTrackbarPos('Upper S', 'Trackbars')
    upper_blue[2] = cv2.getTrackbarPos('Upper V', 'Trackbars')

    threshold_value = cv2.getTrackbarPos('Threshold', 'Trackbars')
    blur_kernel_size = cv2.getTrackbarPos('Blur Kernel', 'Trackbars')

    # Ensure blur kernel size is odd and >= 1
    blur_kernel_size = max(1, blur_kernel_size)
    if blur_kernel_size % 2 == 0:
        blur_kernel_size += 1

    # Create a mask for the blue color
    mask = cv2.inRange(hsv, lower_blue, upper_blue)

    # Apply Gaussian blur to the mask
    mask = cv2.GaussianBlur(mask, (blur_kernel_size, blur_kernel_size), 0)

    # Apply threshold to the mask
    _, mask = cv2.threshold(mask, threshold_value, 255, cv2.THRESH_BINARY)

    # Bitwise-AND mask and original image
    result = cv2.bitwise_and(image, image, mask=mask)

    # Resize images to match dimensions
    height, width = image.shape[:2]
    result_resized = cv2.resize(result, (width, height))
    
    # Concatenate images side by side
    combined = cv2.hconcat([image, result_resized])

    # Show the original and processed images together
    cv2.imshow('Processed Image', combined)

def load_image(index):
    """Load the image at the given index and update HSV."""
    global image, hsv, current_image_index
    current_image_index = index % len(image_files)
    image_path = os.path.join(image_directory, image_files[current_image_index])
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError(f"Image not found at {image_path}")
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    update_image()

# Create separate windows
cv2.namedWindow('Processed Image', cv2.WINDOW_NORMAL)
cv2.namedWindow('Trackbars', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Trackbars', 400, 300)

# Create trackbars in a separate window
cv2.createTrackbar('Lower H', 'Trackbars', lower_blue[0], 179, update_image)
cv2.createTrackbar('Lower S', 'Trackbars', lower_blue[1], 255, update_image)
cv2.createTrackbar('Lower V', 'Trackbars', lower_blue[2], 255, update_image)

cv2.createTrackbar('Upper H', 'Trackbars', upper_blue[0], 179, update_image)
cv2.createTrackbar('Upper S', 'Trackbars', upper_blue[1], 255, update_image)
cv2.createTrackbar('Upper V', 'Trackbars', upper_blue[2], 255, update_image)

cv2.createTrackbar('Threshold', 'Trackbars', threshold_value, 255, update_image)
cv2.createTrackbar('Blur Kernel', 'Trackbars', blur_kernel_size, 50, update_image)

# Initial image load
load_image(current_image_index)

# Key event loop for changing images
while True:
    key = cv2.waitKey(1) & 0xFF  # Wait for a key press
    if key == ord('d'):  # Next image (press 'd')
        load_image(current_image_index + 1)
    elif key == ord('a'):  # Previous image (press 'a')
        load_image(current_image_index - 1)
    elif key == 27:  # Exit (press ESC)
        break

cv2.destroyAllWindows()
